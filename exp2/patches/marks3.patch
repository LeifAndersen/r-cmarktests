diff --git a/src/include/Defn.h b/src/include/Defn.h
index 3dd9d48..07e8509 100644
--- a/src/include/Defn.h
+++ b/src/include/Defn.h
@@ -516,6 +516,7 @@ typedef struct RCNTXT {
     SEXP sysparent;		/* environment the closure was called from */
     SEXP call;			/* The call that effected this context*/
     SEXP cloenv;		/* The environment */
+    SEXP marks;                 /* Continuation Marks */
     SEXP conexit;		/* Interpreted "on.exit" code */
     void (*cend)(void *);	/* C "on.exit" thunk */
     void *cenddata;		/* data for C "on.exit" thunk */
diff --git a/src/include/Internal.h b/src/include/Internal.h
index 09b5c87..b7e805d 100644
--- a/src/include/Internal.h
+++ b/src/include/Internal.h
@@ -287,6 +287,8 @@ SEXP do_pack(SEXP, SEXP, SEXP, SEXP);
 SEXP do_packBits(SEXP, SEXP, SEXP, SEXP);
 SEXP do_paren(SEXP, SEXP, SEXP, SEXP);
 SEXP do_parentenv(SEXP, SEXP, SEXP, SEXP);
+SEXP do_marks(SEXP, SEXP, SEXP, SEXP);
+SEXP do_add_mark(SEXP, SEXP, SEXP, SEXP);
 SEXP do_parentenvgets(SEXP, SEXP, SEXP, SEXP);
 SEXP do_parentframe(SEXP, SEXP, SEXP, SEXP);
 SEXP do_parse(SEXP, SEXP, SEXP, SEXP);
diff --git a/src/library/base/R/eval.R b/src/library/base/R/eval.R
index b19ff32..00448dc 100644
--- a/src/library/base/R/eval.R
+++ b/src/library/base/R/eval.R
@@ -44,6 +44,12 @@ parent.env <- function(env)
 `parent.env<-` <- function(env, value)
     .Internal("parent.env<-"(env, value))
 
+marks <- function(name)
+    .Internal(marks(name))
+
+add.mark <- function(name, val)
+    .Internal(add.mark(name,val))
+
 local <-
     function (expr, envir = new.env())
     eval.parent(substitute(eval(quote(expr), envir)))
diff --git a/src/main/builtin.c b/src/main/builtin.c
index 9ad6409..a6d3521 100644
--- a/src/main/builtin.c
+++ b/src/main/builtin.c
@@ -301,7 +301,7 @@ SEXP attribute_hidden do_envirgets(SEXP call, SEXP op, SEXP args, SEXP rho)
 	SET_CLOENV(s, env);
     }
     else if (isNull(env) || isEnvironment(env) ||
-	isEnvironment(env = simple_as_environment(env)))
+             isEnvironment(env = simple_as_environment(env)))
 	setAttrib(s, R_DotEnvSymbol, env);
     else
 	error(_("replacement object is not an environment"));
@@ -327,9 +327,9 @@ SEXP attribute_hidden do_newenv(SEXP call, SEXP op, SEXP args, SEXP rho)
 	error(_("use of NULL environment is defunct"));
 	enclos = R_BaseEnv;
     } else
-    if( !isEnvironment(enclos)   &&
-	!isEnvironment((enclos = simple_as_environment(enclos))))
-	error(_("'enclos' must be an environment"));
+        if( !isEnvironment(enclos)   &&
+            !isEnvironment((enclos = simple_as_environment(enclos))))
+            error(_("'enclos' must be an environment"));
 
     if( hash ) {
 	args = CDR(args);
@@ -356,6 +356,95 @@ SEXP attribute_hidden do_parentenv(SEXP call, SEXP op, SEXP args, SEXP rho)
     return( ENCLOS(arg) );
 }
 
+SEXP attribute_hidden CollectMarks(SEXP name)
+{
+    SEXP result, t, m;
+    RCNTXT *c;
+    int n = 0;
+
+    /* Get stack frame of first mark */
+    for (c = R_GlobalContext;
+         c != NULL && c->callflag != CTXT_TOPLEVEL && c->marks == R_NilValue;
+         c = c->nextcontext) { }
+
+    /* Get mark count */
+    for (m = c->marks;
+         m != R_EmptyEnv;
+         m = ENCLOS(m)) {
+        n = n + 1;
+    }
+
+    /* Get marks */
+    PROTECT(result = allocList(n));
+    t = result;
+    for (m = c->marks;
+         m != R_EmptyEnv;
+         m = ENCLOS(m)) {
+        SETCAR(t, m);
+        t = CDR(t);
+    }
+
+    UNPROTECT(1);
+    return result;
+}
+
+SEXP attribute_hidden do_marks(SEXP call, SEXP op, SEXP args, SEXP rho)
+{
+    checkArity(op, args);
+    SEXP arg = CAR(args);
+    if(!isString(arg)) {
+        error(_("argument is not a string"));
+    }
+
+    return CollectMarks(arg);
+}
+
+SEXP attribute_hidden AddMark(SEXP mark, SEXP val)
+{
+    RCNTXT *c = R_GlobalContext;
+
+    /* Get context of next frame up */
+    if(c != NULL && c->callflag != CTXT_TOPLEVEL) {
+        c = c->nextcontext;
+    }
+
+    if(c == NULL) {
+        return val;
+    }
+
+    if(c->marks == R_NilValue || c->callflag == CTXT_TOPLEVEL) {
+        RCNTXT *parent;
+
+        /* Get next marks up */
+        for(parent = c;
+            parent != NULL && parent->callflag != CTXT_TOPLEVEL && parent->marks == R_NilValue;
+            parent = parent->nextcontext) { }
+
+        if(parent == NULL || parent->callflag == CTXT_TOPLEVEL) {
+            //c->marks = R_NewHashedEnv(R_EmptyEnv, ScalarInteger(10));
+            c->marks = NewEnvironment(R_NilValue, R_NilValue, R_EmptyEnv);
+        } else {
+            //c->marks = R_NewHashedEnv(parent->marks, ScalarInteger(10));
+            c->marks = NewEnvironment(R_NilValue, R_NilValue, parent->marks);
+        }
+    }
+    defineVar(mark, val, c->marks);
+
+    return val;
+}
+
+SEXP attribute_hidden do_add_mark(SEXP call, SEXP op, SEXP args, SEXP rho)
+{
+    checkArity(op,args);
+    SEXP mark = CAR(args);
+    SEXP val = CAR(CDR(args));
+    if(!isString(mark)) {
+        error(_("argument is not a string"));
+    }
+
+    return AddMark(mark, val);
+}
+
 static Rboolean R_IsImportsEnv(SEXP env)
 {
     if (isNull(env) || !isEnvironment(env))
diff --git a/src/main/context.c b/src/main/context.c
index daf34d1..b8c74b7 100644
--- a/src/main/context.c
+++ b/src/main/context.c
@@ -233,6 +233,7 @@ void begincontext(RCNTXT * cptr, int flags,
     cptr->call = syscall;
     cptr->cloenv = env;
     cptr->sysparent = sysp;
+    cptr->marks = R_NilValue;
     cptr->conexit = R_NilValue;
     cptr->cend = NULL;
     cptr->promargs = promargs;
diff --git a/src/main/names.c b/src/main/names.c
index 0784cea..75658e7 100644
--- a/src/main/names.c
+++ b/src/main/names.c
@@ -743,6 +743,8 @@ FUNTAB R_FunTab[] =
 {"new.env",	do_newenv,	0,	11,     3,      {PP_FUNCALL, PREC_FN,	0}},
 {"parent.env",  do_parentenv,   0,	11,     1,      {PP_FUNCALL, PREC_FN,	0}},
 {"parent.env<-",do_parentenvgets, 0,	11,     2,      {PP_FUNCALL, PREC_LEFT,	1}},
+{"marks",       do_marks,       0,      11,     1,      {PP_FUNCALL, PREC_FN,   0}},
+{"add.mark",    do_add_mark,    0,      11,     2,      {PP_FUNCALL, PREC_FN,   0}},
 {"topenv",	do_topenv,	0,	11,	2,	{PP_FUNCALL, PREC_FN,	0}},
 {"l10n_info",	do_l10n_info,	0,	11,	0,	{PP_FUNCALL, PREC_FN,	0}},
 {"Cstack_info", do_Cstack_info,	0,	11,	0,	{PP_FUNCALL, PREC_FN,	0}},
